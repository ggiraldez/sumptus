#+TITLE: Sumptus ToDo list
#+STARTUP: showall

* Tasks
** DONE Implement endpoint for creating new expenses
CLOSED: [2016-03-04 Fri 18:36]
- [X] Fix date input to ignore local timezone
- [X] Use Yesql for interfacing with the database
** DONE Add a nice style to the page
CLOSED: [2016-03-14 Mon 22:46]
Used Material style from http://muicss.com
** DONE Simple UX improvements
CLOSED: [2016-03-14 Mon 22:44]
- [X] Default to today
- [X] Suggest categories using a datalist
** TODO Add data validation, server side
Analyze if using Schema is the best option; maybe settle for a simpler solution
like Bouncer. Otherwise, check Clojure Toolbox for other alternatives. Basic
idea: coerce and validate simultaneaously; return validation errors in some
standard way as to facilitate rendering.
- [ ] Add Prismatic Schema for expense schema
- [ ] Define expense type using schema
- [ ] Validate incoming new expenses and show validation errors in the browser
- [ ] Define coercer for user input expenses
- [ ] Change the amount data type in the database to Decimal
** TODO Refactor web namespace
- [X] Separate views
- [X] Separate model related functions
- [X] Rework the controller and tie up missing functionality (ie. 404 page, etc.)
- [ ] Check dependencies, upgrade necessary jars and remove duplicates
** TODO Implement a component architecture
Maybe use yoyo, or component eventually
** TODO Add unit tests
** TODO Allow modifying/deleting expenses
** TODO Add security, only allow authorized users to see the expense list and add expenses
** TODO Minify assets
** TODO Import/export expenses
** TODO Multi-tenancy
** TODO Client-side UI using Reagent/re-frame
** TODO Category normalization (maybe)
** TODO Optimize UX/UI for the common use cases
** TODO Reports
*** TODO Category breakdown with date filter
*** TODO Expenses by month
*** TODO Side-by-side comparison with the last year
** TODO Recurring expenses
